# -*- coding: utf-8 -*-
"""All-Words Ensemble Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N9jtYG9fLWAHfIgmuiuWhtpU3lMUnU_i
"""

from keras.models import Sequential
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.models import Model
from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding, SimpleRNN, GRU, Bidirectional
from keras.optimizers import RMSprop
from keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from keras.utils import to_categorical
from keras.callbacks import EarlyStopping
from numpy import array
from numpy import asarray
from sklearn.metrics import classification_report
from sklearn.metrics import precision_recall_fscore_support
from gensim.models import word2vec
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive')

result_file_path = "/content/drive/My Drive/RNN/Result_Pretrained_Samar_Word2vec.txt"
vector_model_path = "/content/drive/My Drive/RNN/samar_urduvec_140M_100K_300d.txt"
df = pd.read_csv('/content/drive/My Drive/RNN/ALL_WORDS.csv',delimiter=',',encoding='latin-1') #MFarhat Path change

max_words = 10000
max_len = 300

sns.countplot(df.v1)
X = df.v2
Y = df.v1
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.33)

max_words = 10000
max_len = 300

tok = Tokenizer(num_words=max_words)
tok.fit_on_texts(X_train)
vocab_size = len(tok.word_index) +1


sequences = tok.texts_to_sequences(X_train)
sequences_matrix = sequence.pad_sequences(sequences,maxlen=max_len, padding='post')
print(sequences_matrix)

# load the whole embedding into memory
embeddings_index = dict()
f = open(vector_model_path,"r")
for line in f:
    values = line.split()
    word = values[0]
    coefs = asarray(values[1:], dtype='float32')
    embeddings_index[word] = coefs
f.close()
print('Loaded %s word vectors.' % len(embeddings_index))
# create a weight matrix for words in training docs

embedding_matrix = np.zeros((vocab_size, 300)) # Embedding Size
for word, i in tok.word_index.items():
	embedding_vector = embeddings_index.get(word)
	if embedding_vector is not None:
		embedding_matrix[i] = embedding_vector

################## Development of First Model ####################
model = Sequential()
model.add(Embedding(vocab_size, 300, weights=[embedding_matrix], input_length=300, trainable=False))
model.add(LSTM(100, return_sequences=True))
model.add(LSTM(100, return_sequences=True))
model.add(LSTM(100, return_sequences=False)) 
model.add(Dropout(0.2))
model.add(Dense(8, activation='softmax'))
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(sequences_matrix, Y_train, validation_split=0.2, epochs=5, batch_size=16)
test_sequences = tok.texts_to_sequences(X_test)
test_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)
score = model.evaluate(test_sequences_matrix, Y_test, batch_size=16)
Y_Pred_Model1 = model.predict(test_sequences_matrix)
Y_Pred_Model1=np.argmax(Y_Pred_Model1,axis=1)

################## Development of Second Model ####################


   # create a weight matrix for words in training docs

embedding_matrix = np.zeros((vocab_size, 500))
for word, i in tok.word_index.items():
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        embedding_matrix[i] = embedding_vector
    

model = Sequential()
model.add(Embedding(vocab_size, 500, weights=[embedding_matrix], input_length=500, trainable=False))
model.add(LSTM(100, return_sequences=True))
model.add(LSTM(100, return_sequences=True))
model.add(LSTM(100, return_sequences=False)) 
model.add(Dropout(0.2))
model.add(Dense(8, activation='softmax'))
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(sequences_matrix, Y_train, validation_split=0.2, epochs=5, batch_size=16)
test_sequences = tok.texts_to_sequences(X_test)
test_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)
score = model.evaluate(test_sequences_matrix, Y_test, batch_size=16)
Y_Pred_Model2 = model.predict(test_sequences_matrix)
Y_Pred_Model2=np.argmax(Y_Pred_Model2,axis=1)

################## Development of Third Model ####################

   # create a weight matrix for words in training docs

embedding_matrix = np.zeros((vocab_size, 5000))
for word, i in tok.word_index.items():
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        embedding_matrix[i] = embedding_vector
    

model = Sequential()
model.add(Embedding(vocab_size, 5000, weights=[embedding_matrix], input_length=5000, trainable=False))
model.add(SimpleRNN(100, return_sequences=True)) 
model.add(SimpleRNN(100, return_sequences=True))
model.add(SimpleRNN(100, return_sequences=True))
model.add(SimpleRNN(100, return_sequences=True))
model.add(SimpleRNN(100, return_sequences=True))
model.add(SimpleRNN(100, return_sequences=True))
model.add(SimpleRNN(100, return_sequences=True))
model.add(SimpleRNN(100, return_sequences=True))
model.add(SimpleRNN(100, return_sequences=True))
model.add(SimpleRNN(100, return_sequences=False)) 
model.add(Dropout(0.2))
model.add(Dense(8, activation='softmax'))
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(sequences_matrix, Y_train, validation_split=0.2, epochs=5, batch_size=16)
test_sequences = tok.texts_to_sequences(X_test)
test_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)
score = model.evaluate(test_sequences_matrix, Y_test, batch_size=16)
Y_Pred_Model3 = model.predict(test_sequences_matrix)
Y_Pred_Model3=np.argmax(Y_Pred_Model3,axis=1)

################## End Third Model ####################

length=len(Y_Pred_Model1)

i = 0
while i < length:
	List=[Y_Pred_Model1[i], Y_Pred_Model2[i], Y_Pred_Model3[i]]
	most_frequent_sense= max(set(List), key = List.count)
	Y_Pred_Model1[i]= most_frequent_sense
	i += 1

print(classification_report(Y_test.values,Y_Pred_Model1))   #Print complete confusion matrix including precision, recall and f-measure on the screen
print(accuracy_score(Y_test.values,Y_Pred_Model1)) #Print accuracy on the screen